#version 330 core
struct Material
{
sampler2D diffuse;
sampler2D specular;
};

struct Light
{
vec3 position;
vec3 ambient;
vec3 diffuse;
vec3 specular;
float constant;
float linear;
float quadratic;
};

in vec2 passUV;
in vec3 Normal;
in vec3 fragPos;

out vec4 fragColor;
uniform vec3 viewPos;
uniform Material material;
uniform Light light;

void main()
{
vec3 ambient = light.ambient * texture(material.diffuse, passUV).rgb;
vec3 lightDir = normalize(light.position - fragPos);
vec3 norm = normalize(Normal);
float diff = max(dot(norm, lightDir), 0.0);
vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, passUV));
//specular
vec3 viewDir = normalize(viewPos - fragPos);
vec3 reflectDir = reflect(-lightDir, norm);
float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
vec3 specular = light.specular * spec * vec3(texture(material.specular, passUV));

float distance = length(light.position - fragPos);
float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
ambient *= attenuation;
diffuse *= attenuation;
specular *= attenuation;
vec3 result = ambient + diffuse + specular;
fragColor = vec4(result, 1.0);
};
